generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model feedback {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String   @db.VarChar(255)
  student_id  String   @db.Uuid
  guardian_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  guardian    guardian @relation(fields: [guardian_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student     student  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model guardian {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  feedback    feedback[]
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model lesson {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String   @db.VarChar(255)
  difficulty_level Int
  student_id       String   @db.Uuid
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  student          student  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model student {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String     @db.VarChar(255)
  learning_style String     @db.VarChar(255)
  progress_level Int
  user_id        String     @db.Uuid
  created_at     DateTime   @default(now()) @db.Timestamp(6)
  updated_at     DateTime   @default(now()) @db.Timestamp(6)
  feedback       feedback[]
  lesson         lesson[]
  user           user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  task           task[]
}

model task {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  status     String   @db.VarChar(255)
  student_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  student    student  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  guardian    guardian[]
  student     student[]
}
